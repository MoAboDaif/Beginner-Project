name: deploy s3 static website
run-name:  Beginner Project – “Static Product Portfolio Site”
on:
  push:
permissions: 
  id-token: write
  contents: read
jobs:
  web-content-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Lint HTML files
        working-directory: site
        run: npx htmlhint "*.html"
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-files
          path: 'site/*.html'
  build-test-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12
      - name: Plan Terraform infrastructure
        run: |
          terraform init
          terraform validate
          terraform workspace select  test-${{ github.ref_name }}-${{ github.run_number }} \
          || terraform workspace new  test-${{ github.ref_name }}-${{ github.run_number }} 
          terraform plan -out=test-${{ github.ref_name }}-${{ github.run_number }}-tfplan
      - name: artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/test-${{ github.ref_name }}-${{ github.run_number }}-tfplan

  deploy-test-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      test_bucket_name: ${{ steps.terraform_output.outputs.test_bucket_name }}
      test_website_url: ${{ steps.terraform_output.outputs.test_website_url }}
    needs: 
      - build-test-infrastructure
      - web-content-test
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume:  ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/
      - name: Terraform init
        run: terraform init
      - name: test Workspace
        run: terraform workspace select test-${{ github.ref_name }}-${{ github.run_number }} || terraform workspace new test-${{ github.ref_name }}-${{ github.run_number }}
      - name: Terraform apply
        run: terraform apply -auto-approve test-${{ github.ref_name }}-${{ github.run_number }}-tfplan
      - name: Terraform output
        id: terraform_output
        run: |
          TF="$TERRAFORM_CLI_PATH/terraform-bin"
          echo "test_bucket_name=$($TF output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "test_website_url=$($TF output -raw static_website_url)" >> $GITHUB_OUTPUT

  upload-static-content:
    runs-on: ubuntu-latest
    needs: 
      - web-content-test 
      - deploy-test-infrastructure
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: html-files
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Upload files to S3
        run: |
          aws s3 sync . s3://${{ needs.deploy-test-infrastructure.outputs.test_bucket_name }} --exclude "*" --include "*.html"
          echo "Website deployed to: ${{ needs.deploy-test-infrastructure.outputs.test_website_url }}"
  
  test-website:
    runs-on: ubuntu-latest
    needs: 
      - upload-static-content
      - deploy-test-infrastructure
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: html-files
      - name: Run tests
        run: |
          echo "Running tests on the deployed website..."
          curl -I ${{ needs.deploy-test-infrastructure.outputs.test_website_url }}/healthcheck.html

  destroy-test-infrastructure:
    if: always()
    runs-on: ubuntu-latest
    needs: 
      - test-website
    environment: test-destroy-approval
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12
      - name: Destroy test infrastructure
        run: |
          terraform init
          terraform workspace select test-${{ github.ref_name }}-${{ github.run_number }} \
          || terraform workspace new test-${{ github.ref_name }}-${{ github.run_number }}
          terraform destroy -auto-approve
          terraform workspace select default || terraform workspace new default
          terraform workspace delete test-${{ github.ref_name }}-${{ github.run_number }}
  
  Plan-Production-Env:
    if: ${{ github.ref_name }} == "main"
    runs-on: ubuntu-latest
    needs:
      - test-website
      - destroy-test-infrastructure
    steps: 
      - name: Checkout Source Code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: AWS security credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          audience: sts.amazonaws.com
          aws-region: eu-central-1
          role-to-assume:  ${{ secrets.AWS_ROLE_ARN }}
      - name: Terraform Plan
        run: |
          cd terraform
          terraform init
          terraform workspace select production || terraform workspace new production 
          terraform plan -out=production.tfplan
      - name: Upload Production Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Production-Plan
          path: terraform/production.tfplan
  Deploy-Production-Env:
    runs-on: ubuntu-latest
    needs:
      - Plan-Production-Env
    environment:
      name: production-infrastructure-approval
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: AWS OIDC Setup
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
      - name: Plan Artifact Download
        uses: actions/download-artifact@v4
        with:
          name: Production-Plan
          path: terraform
      - name: Static Content Artifact Download
        uses: actions/download-artifact@v4
        with:
          name: html-files
          path: html-files-artifact-${{ github.run_id }}
      - name: Deploy Production Env
        run: |
          cd terraform
          terraform init
          terraform workspace select production
          terraform apply -auto-approve production.tfplan \
          && echo "Production Environemnt Deployed ... "
          cd ../html-files-artifact-${{ github.run_id }}
          TF="$TERRAFORM_CLI_PATH/terraform-bin"
          PROD_BUCKET_NAME=$(tf output -raw s3_bucket_name)
          aws s3 sync . s3://$PROD_BUCKET_NAME --recursive
          echo "website url: $(tf output -raw static_website_url)"

