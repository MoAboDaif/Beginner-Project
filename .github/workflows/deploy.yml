name: deploy s3 static website
run-name:  Beginner Project – “Static Product Portfolio Site”
on:
  push:
permissions: 
  id-token: write
  contents: read
jobs:
  web-content-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Lint HTML files
        working-directory: site
        run: npx htmlhint "*.html"
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-files
          path: 'site/*.html'
  build-test-infrastructure:
    runs-on: ubuntu-latest
    needs: web-content-test
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12
      - name: Plan Terraform infrastructure
        run: |
          terraform init
          terraform validate
          terraform workspace select  test-${{ github.ref_name }}-${{ github.run_number }} \
          || terraform workspace new  test-${{ github.ref_name }}-${{ github.run_number }} 
          terraform plan -out=test-${{ github.ref_name }}-${{ github.run_number }}-tfplan
      - name: artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/test-${{ github.ref_name }}-${{ github.run_number }}-tfplan

  deploy-test-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      test_bucket_name: ${{ steps.terraform_output.outputs.test_bucket_name }}
      test_website_url: ${{ steps.terraform_output.outputs.test_website_url }}
    needs: build-test-infrastructure
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume:  ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/
      - name: Terraform init
        run: terraform init
      - name: test Workspace
        run: terraform workspace select test-${{ github.ref_name }}-${{ github.run_number }} || terraform workspace new test-${{ github.ref_name }}-${{ github.run_number }}
      - name: Terraform apply
        run: terraform apply -auto-approve test-${{ github.ref_name }}-${{ github.run_number }}-tfplan
      - name: Terraform output
        id: terraform_output
        run: |
          TF="$TERRAFORM_CLI_PATH/terraform-bin"

          echo "test_bucket_name=$($TF output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "test_website_url=$($TF output -raw static_website_url)" >> $GITHUB_OUTPUT

  upload-website:
    runs-on: ubuntu-latest
    needs: [web-content-test, deploy-test-infrastructure]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: html-files
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Upload files to S3
        run: |
          aws s3 sync . s3://${{ needs.deploy-test-infrastructure.outputs.test_bucket_name }} --exclude "*" --include "*.html"
          echo "Website deployed to: ${{ needs.deploy-test-infrastructure.outputs.test_website_url }}"
  destroy-test-infrastructure:
    runs-on: ubuntu-latest
    needs: 
      - deploy-test-infrastructure
    environment: test-destroy-approval
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: config AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12
      - name: Destroy test infrastructure
        run: |
          terraform init
          terraform workspace select test-${{ github.ref_name }}-${{ github.run_number }} \
          || terraform workspace new test-${{ github.ref_name }}-${{ github.run_number }}
          terraform destroy -auto-approve
          terraform workspace select default || terraform workspace new default
          terraform workspace delete test-${{ github.ref_name }}-${{ github.run_number }}
        
  # deploy-production-infrastructure:
  #   runs-on: ubuntu-latest
  #   needs: test-deploy
  #   environment: production-infrastructure-approval
  #   defaults:
  #     run:
  #       working-directory: terraform
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: config AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: eu-central-1
  #     - name: Terraform setup
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.12
  #     - name: Terraform init
  #       run: terraform init
  #     - name: test Workspace
  #       run: terraform workspace select production || terraform workspace new production
  #     - name: Terraform apply
  #       run: terraform apply -auto-approve
  # deploy-production-website:
  #   runs-on: ubuntu-latest
  #   needs: deploy-production-infrastructure
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: html-files
  #     - name: config AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: eu-central-1
  #     - name: Upload files to S3
  #       run: |
  #         aws s3 sync . s3://$AWS_S3_BUCKET_NAME --exclude "*" --include "*.html"